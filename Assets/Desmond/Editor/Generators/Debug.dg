#DebugLog

$in System.String message

$method print forceInline
	Debug.Log(<message>);
	
#String

$out System.String stringValue
	"debug string"
	
#Int

$out System.Int32 intValue
	23
	
#Float

$out System.Single floatValue
	123.0f
		
#Timeline
!System.Collections

$def System.Single timelineTime 0.0f
$def System.Single timelineDirection 1.0f
$def System.Single timelineDuration 0.0f

$in UnityEngine.AnimationCurve curve

$classLocalName timelineCoroutine

$method play
	<timelineDirection> = 1.0f;
	StopCoroutine("<timelineCoroutine>");
	StartCoroutine("<timelineCoroutine>");

$method playFromBegining
	<timelineTime> = 0.0f;
	<timelineDirection> = 1.0f;
	StopCoroutine("<timelineCoroutine>");
	StartCoroutine("<timelineCoroutine>");
	
$method pause
	StopCoroutine("<timelineCoroutine>");
	
$method playReverse
	<timelineDirection> = -1.0f;
	StopCoroutine("<timelineCoroutine>");
	StartCoroutine("<timelineCoroutine>");
	
$method playReverseFromEnd
	<timelineTime> = <timelineDuration>;
	<timelineDirection> = -1.0f;
	StopCoroutine("<timelineCoroutine>");
	StartCoroutine("<timelineCoroutine>");
	
$out System.Single value
	<curve>.Evaluate(<timelineTime>)
	
$method onAwake static Awake
	<timelineDuration> = <curve>[<curve>.length - 1].time;

$customMethod
private IEnumerator <timelineCoroutine>(){
	bool <methodLocalName finished> = false;
	while(!<finished>){
		timelineTime += Time.deltaTime * <timelineDirection>;
		if(<timelineDirection> == 1.0f){
			if(<timelineTime> > <timelineDuration>){
				<timelineTime> = <timelineDuration>;
				<finished> = true;
			}
		}else{
			if(<timelineTime> <= 0.0f){
				<timelineTime> = 0.0f;
				<finished> = true;
			}
		}
		->onTick
		yield return null;
	}
	->onFinished
}
