#Flow/Conditional

$in System.Boolean condition

$method in
	if(<condition>){
		->ifTrue
	}else{
		->ifFalse
	}
	->finally
	
$method in without ifFalse
	if(<condition>){
		->ifTrue
	}
	->finally
	
$method in without ifTrue
	if(!<condition>){
		->ifFalse
	}
	->finally
	
#Flow/Flip-Flop

$def System.Boolean flipFlopState false

$method in
	<flipFlopState> = !<flipFlopState>;
	if(<flipFlopState>){
		->outA
	}else{
		->outB
	}
	->finally
	
$method in without outB
	<flipFlopState> = !<flipFlopState>;
	if(<flipFlopState>){
		->outA
	}
	->finally
	
$method in without outA
	<flipFlopState> = !<flipFlopState>;
	if(!<flipFlopState>){
		->outB
	}
	->finally
	
#Flow/Latch

$def System.Boolean latchState false

$method toggle
	<latchState> = !<latchState>;
	if(<latchState>){
		->onSet
	}else{
		->onReset
	}
	->finally
	
$method set
	<latchState> = true;
	->onSet
	->finally
	
$method reset
	<latchState> = false;
	->onReset
	->finally
	
$out System.Boolean state
	<latchState>
	
#Flow/While

$in System.Boolean condition

$method in
	while(<condition>){
		->do
	}
	->finally
	
#Flow/For

$def System.Int32 forLoopIndex 0

$in System.Int32 start
$in System.Int32 end

$method in
	for(<forLoopIndex> = <start>; <forLoopIndex> < <ceiling>; <forLoopIndex>++){
		->do
	}
	->finally
	
$out System.Int32 index
	<forLoopIndex>
	
	